title China_GDPR_voice_acquisition_bonded_button_v1.4


actor #6495ED "user" as user
boundary "HMI" as HMI #gold
control "PrivacyService" as Privacy #gold
database "SqliteDB" as DB #gold
boundary "CarService" as CarService #gold
boundary "AdasController" as ADAS #2980B9

activate user #6495ED
activate HMI #gold
activate Privacy #gold
activate DB #gold
activate CarService #gold
activate ADAS #2980B9

note over HMI, CarService#F9E79F: The actuall implementation service names would be different.

note over user, ADAS#F9E79F: Version 1.0: Initial drafted to complete the scenarios of normal VoiceAcquisitionNotAuthorized and VoiceAcquisitionAuthorized.\nVersion 1.1: Added in 2023-09-25 to complete the "auto-disable" scenarios with the benchmarks of Xipeng P7.\nVersion 1.2: Added in 2023-09-26 to complete the "auto-enable" scenarios with the benchmarks of Xipeng P7.\nVersion 1.3: Revised the "button status storage" mechanism to meet product requirements.\nVersion 1.4: Corrected a typo mistake with "MCU" participant. 




==Vehicle System Power Mode == RUN & User has accessed into vehicle==#lightblue

ADAS-#2980B9>CarService: <color: #2980B9>**CCSpdlVcCmdSwReqDspCmd(0x01)**</color>
HMI->Privacy: register(AdasAccVoiceControlButton)
HMI->CarService: getStatus(AdasAccVoiceControlButton)
CarService-->HMI:return AdasAccVoiceControlButton(False)
HMI->HMI: reset(AdasAccVoiceControlButton)

note over user, ADAS #lightblue: Now AdasAccVoiceControlButton has been displaying with status as "disabled"

==Head Unit System has completed initialization==#gold


group #gold VoiceAcquisitionNotAuthorized [User does not grant the access to microphone for voice acquisition]

user->HMI: set(AdasAccVoiceControlButton)
HMI->Privacy: dispatch
Privacy->HMI: popup(VoiceAcquisitionAllowenceRequest)
activate Privacy #gold

user->HMI: select [cancel]
HMI-->Privacy: dispatch
Privacy-->HMI: return
deactivate Privacy
#VoiceAcquisitionNotAuthorized
end 


group #2980B9 VoiceAcquisitionAuthorized [User has granted the access to microphone for voice acquisition]

user->HMI: set(AdasAccVoiceControlButton)
HMI->Privacy: dispatch
Privacy-->HMI: return next
HMI->HMI: async set(AdasAccVoiceControlButton)
HMI->CarService: async dispatch
CarService-#2980B9>ADAS: <color: #2980B9>**CCSpdlVcCmdSwReq(0x02)**</color>
HMI->HMI: async startResetTimer(AdasAccVoiceControlButton)
ADAS-#2980B9>CarService: <color: #2980B9>**CCSpdlVcCmdSwReqDspCmd(0x02)**</color>
CarService-->HMI: return AdasAccVoiceControlButton(True)
HMI->HMI: clearResetTimer(AdasAccVoiceControlButton)
#VoiceAcquisitionNotAuthorized
end 
entryspacing 0
note over user, ADAS #lightblue: Now AdasAccVoiceControlButton has been displaying with status as "enabled"

entryspacing 3


entryspacing 1


group #gold VoiceAcquisitionAuthorized -> VoiceAcquisitionNotAuthorized [User selected NotAutorized from Authorized on HMI]

user->HMI: set(VoiceAcquisitionNotAuthorized)
HMI->Privacy: dispatch

note over HMI, CarService #lightblue: Disabling "VoiceAcquisition" related buttons could be implemented by application themselves, which depends on actual archicture design.

Privacy->DB: storesAlloiceAcquisitionButtonsStatus()

note over Privacy, DB #F9E79F: Privacy service only stores all buttons status in DB while user di-authorizes.

Privacy->Privacy: disableAllVoiceAcquisitionButtons()
activate Privacy #gold

Privacy->HMI: async reset(InternalVoiceAcquisitionButtonA)
HMI-->Privacy: return success
Privacy->HMI: async reset(InternalVoiceAcquisitionButtonB)
HMI-->Privacy: return success
Privacy->HMI: async reset(AdasAccVoiceControlButton)
HMI->CarService: async dispatch
CarService-#A93226>ADAS: <color: #A93226>**CCSpdlVcCmdSwReq(0x01)**</color>
ADAS-#A93226>CarService: <color: #A93226>**CCSpdlVcCmdSwReqDspCmd(0x01)**</color>
CarService-->HMI: return AdasAccVoiceControlButton(False)

deactivate Privacy

# VoiceAcquisitionAuthorized -> VoiceAcquisitionNotAuthorized
end
entryspacing 0
note over user, ADAS #lightblue: Now AdasAccVoiceControlButton has been displaying with status as "disabled"

entryspacing 3


entryspacing 1
group #2980B9 VoiceAcquisitionNotAuthorized -> VoiceAcquisitionAuthorized [User selected Autorized from NotAuthorized on HMI]

user->HMI: set(VoiceAcquisitionAuthorized)
HMI->Privacy: dispatch
activate Privacy #gold
Privacy->DB: async getAllVoiceAcquisitionButtons()

DB-->Privacy: return {\n   InternalVoiceAcquisitionButtonA: true,  \n   InternalVoiceAcquisitionButtonB: false, \n   AdasAccVoiceControlButton: true\n}




Privacy->HMI: async set(InternalVoiceAcquisitionButtonA)
HMI-->Privacy: return success
Privacy->HMI: async set(InternalVoiceAcquisitionButtonB)
HMI-->Privacy: return success
Privacy->HMI: async set(AdasAccVoiceControlButton)


HMI->CarService: async dispatch
CarService-#2980B9>ADAS: <color: #2980B9>**CCSpdlVcCmdSwReq(0x02)**</color>
ADAS-#2980B9>CarService: <color: #2980B9>**CCSpdlVcCmdSwReqDspCmd(0x02)**</color>
CarService-->HMI: return AdasAccVoiceControlButton(True)

deactivate Privacy

# VoiceAcquisitionAuthorized -> VoiceAcquisitionNotAuthorized
end
entryspacing 0
note over user, ADAS #lightblue: Now all voice acquisition buttons have been back in the status before user di-authorized.



