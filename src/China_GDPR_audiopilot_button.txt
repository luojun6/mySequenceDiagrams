title China_GDPR_audiopilot_button_v1.1

actor #6495ED "user" as user
boundary "HMI" as HMI #gold
control "PrivacyService" as Privacy #gold
control AMPService #gold

boundary "CarService" as CarService #gold
entity MCU #3498DB
entity AMP #2980B9

activate user #6495ED
activate MCU #3498DB
activate AMP #2980B9

note over user, AMP#F9E79F: Version 1.1 Corrected for the storage mechanism: OS stores the [AudioPilotButton] status in SqliteDB.

note over HMI, CarService#F9E79F: The actuall implementation service names would be different.


==Vehicle System Power Mode == RUN & User has accessed into vehicle==#lightblue

MCU<-#2980B9:4>AMP: <color: #2980B9>**Handshake via CAN Messages**</color>

note over MCU #lightblue: MCU stores the last AutoVolmCmpstnFdbk value in NVM
MCU-#2980B9>MCU: <color: #2980B9>**getFromNvm(AutoVolmCmpstnSoftSw)**</color>

MCU-#2980B9>AMP: <color: #2980B9>**AutoVolmCmpstnSoftSw(0x00)**</color>
MCU<#2980B9-AMP: <color: #2980B9>**AutoVolmCmpstnFdbk(0x00)**</color>


note over user, MCU #lightblue: Default AudiopilotButton is displaying with status as "disabled"

activate HMI #gold
activate Privacy #gold
activate AMPService #gold
activate CarService #gold

AMPService->CarService: get(AutoVolmCmpstnFdbk)

MCU-#2980B9>CarService: <color: #2980B9>**AutoVolmCmpstnFdbk(0x00)**</color>

note over AMPService, CarService #F9E79F: No value change, no onChangecallback 
HMI->Privacy: register(AudiopilotButton)
HMI->CarService: getStatus(AudiopilotButton)
CarService-->HMI:return AudiopilotButton(False)
AMPService->Privacy: register(AuthPrivate.micStatus)
HMI->HMI: reset(AudiopilotButton)
note over user, MCU #lightblue: Now AudiopilotButton has been displaying with status as "disabled"


==Head Unit System has completed initialization==#gold


group #gold VoiceAcquisitionNotAuthorized [User does not grant the access to microphone for voice acquisition]

user->HMI: set(AudiopilotButton)
HMI->Privacy: dispatch
Privacy->HMI: popup(VoiceAcquisitionAllowenceRequest)
activate Privacy #gold

user->HMI: select [cancel]
HMI-->Privacy: dispatch
Privacy-->HMI: return
deactivate Privacy
#VoiceAcquisitionNotAuthorized
end 


group #2980B9 VoiceAcquisitionAuthorized [User has granted the access to microphone for voice acquisition]

user->HMI: set(AudiopilotButton)
HMI->Privacy: dispatch
Privacy-->HMI: return next
HMI->HMI: async set(AudiopilotButton)
HMI->AMPService: async dispatch
AMPService->CarService: async dispatch
CarService-#2980B9>MCU: <color: #2980B9>**AutoVolmCmpstnSoftSw(0x01)**</color>
MCU-#2980B9>AMP: <color: #2980B9>**AutoVolmCmpstnSoftSw(0x01)**</color>
MCU<#2980B9-AMP: <color: #2980B9>**AutoVolmCmpstnFdbk(0x01)**</color>
HMI->HMI: async startResetTimer(AudiopilotButton)
MCU-#2980B9>CarService: <color: #2980B9>**AutoVolmCmpstnFdbk(0x01)**</color>

CarService->AMPService: async dispatch
AMPService-->HMI: return AudiopilotButton(True)

HMI->HMI: clearResetTimer(AudiopilotButton)
#VoiceAcquisitionNotAuthorized
end 
entryspacing 0
note over user, MCU #lightblue: Now AudiopilotButton has been displaying with status as "enabled". Please be noticed that the default AutoVolmCmpstnFdbk value is 0x01 (ON). 

entryspacing 3



entryspacing 1
group #gold VoiceAcquisitionAuthorized -> VoiceAcquisitionNotAuthorized [User selected NotAutorized from Authorized on HMI]

user->HMI: set(VoiceAcquisitionNotAuthorized)
HMI->Privacy: dispatch

Privacy->AMPService: notify(PrivateAuth.micStatus)

note over HMI, CarService #lightblue: Disabling "VoiceAcquisition" related buttons could be implemented by application themselves, which depends on actual archicture design.

Privacy->Privacy: disableAllVoiceAcquisitionButtons()
activate Privacy #gold

Privacy->HMI: async reset(InternalVoiceAcquisitionButtonA)
HMI-->Privacy: return success
Privacy->HMI: async reset(InternalVoiceAcquisitionButtonB)
HMI-->Privacy: return success
Privacy->HMI: async reset(AudiopilotButton)
HMI->AMPService: async dispatch
AMPService->CarService: async dispatch

CarService-#2980B9>MCU: <color: #2980B9>**AutoVolmCmpstnSoftSw(0x00)**</color>
MCU-#2980B9>AMP: <color: #2980B9>**AutoVolmCmpstnSoftSw(0x00)**</color>
MCU<#2980B9-AMP: <color: #2980B9>**AutoVolmCmpstnFdbk(0x00)**</color>
MCU-#2980B9>CarService: <color: #2980B9>**AutoVolmCmpstnFdbk(0x00)**</color>
CarService-->HMI: return AudiopilotButton(False)


deactivate Privacy

# VoiceAcquisitionAuthorized -> VoiceAcquisitionNotAuthorized
end
entryspacing 0
note over user, MCU #lightblue: Now AudiopilotButton has been displaying with status as "disabled".

entryspacing 3



entryspacing 1
group #A93226 VoiceAcquisitionNotAuthorized -> VoiceAcquisitionAuthorized [User selected Autorized from NotAuthorized on HMI]

user->HMI: set(VoiceAcquisitionAuthorized)
HMI->Privacy: dispatch
activate Privacy #gold

Privacy->HMI: async set(InternalVoiceAcquisitionButtonA)
#Privacy->Privacy:enableAllVoiceAcquisitionButtons()

HMI-->Privacy: return success
Privacy->HMI: async set(InternalVoiceAcquisitionButtonB)
HMI-->Privacy: return success


#Privacy->HMI: async set(AudiopilotButton)
#HMI->CarService: async dispatch
#CarService-#2980B9>MCU: <color: #2980B9>**AutoVolmCmpstnSoftSw(0x01)**</color>

#MCU-#2980B9>AMP: <color: #2980B9>**AutoVolmCmpstnSoftSw(0x01)**</color>
#MCU<#2980B9-AMP: <color: #2980B9>**AutoVolmCmpstnFdbk(0x01)**</color>

#MCU-#2980B9>CarService: <color: #2980B9>**AutoVolmCmpstnFdbk(0x01)**</color>
# CarService-->HMI: return AudiopilotButton(True)

deactivate Privacy

note over HMI, MCU #E6B0AA: There is a big difference between [AudiopilotButton] and other "VoiceAcquisition" related buttons is that the default AudiopilotButton's status is disabled.

# VoiceAcquisitionAuthorized -> VoiceAcquisitionNotAuthorized
end


entryspacing 0
note over user, MCU #lightblue: Now AudiopilotButton has been displaying with status as "disabled".


